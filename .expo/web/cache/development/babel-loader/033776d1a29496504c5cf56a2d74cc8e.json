{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { USER_STATE_CHANGE, USER_POSTS_STATE_CHANGE } from \"../constants/index\";\nimport firebase from 'firebase';\nimport 'firebase/auth';\nexport function fetchUser() {\n  return function (dispatch) {\n    firebase.firestore().collection('users').doc(firebase.auth().currentUser.uid).get().then(function (snapshot) {\n      if (snapshot.exists) {\n        dispatch({\n          type: USER_STATE_CHANGE,\n          currentUser: snapshot.data()\n        });\n      } else {\n        console.log('does not exist');\n      }\n    });\n  };\n}\nexport function fetchUserPosts() {\n  return function (dispatch) {\n    firebase.firestore().collection('posts').orderBy(\"creation\", \"asc\").get().then(function (snapshot) {\n      var posts = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread({\n          id: id\n        }, data);\n      });\n      dispatch({\n        type: USER_POSTS_STATE_CHANGE,\n        posts: posts\n      });\n    });\n  };\n}","map":{"version":3,"sources":["C:/Users/user/AndroidStudioProjects/berkay/bitirme/redux/actions/index.js"],"names":["USER_STATE_CHANGE","USER_POSTS_STATE_CHANGE","firebase","fetchUser","dispatch","firestore","collection","doc","auth","currentUser","uid","get","then","snapshot","exists","type","data","console","log","fetchUserPosts","orderBy","posts","docs","map","id"],"mappings":";;;;;;AAAA,SAAQA,iBAAR,EAA2BC,uBAA3B;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAO,eAAP;AAEA,OAAO,SAASC,SAAT,GAAoB;AACvB,SAAO,UAACC,QAAD,EAAc;AACjBF,IAAAA,QAAQ,CAACG,SAAT,GACCC,UADD,CACY,OADZ,EAECC,GAFD,CAEKL,QAAQ,CAACM,IAAT,GAAgBC,WAAhB,CAA4BC,GAFjC,EAGCC,GAHD,GAICC,IAJD,CAIM,UAACC,QAAD,EAAe;AACjB,UAAGA,QAAQ,CAACC,MAAZ,EAAmB;AAEfV,QAAAA,QAAQ,CAAC;AAACW,UAAAA,IAAI,EAAEf,iBAAP;AAA0BS,UAAAA,WAAW,EAAEI,QAAQ,CAACG,IAAT;AAAvC,SAAD,CAAR;AACH,OAHD,MAII;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACH;AACJ,KAZD;AAcH,GAfD;AAgBH;AAED,OAAO,SAASC,cAAT,GAAyB;AAC5B,SAAO,UAACf,QAAD,EAAc;AACjBF,IAAAA,QAAQ,CAACG,SAAT,GACCC,UADD,CACY,OADZ,EAECc,OAFD,CAES,UAFT,EAEqB,KAFrB,EAGCT,GAHD,GAICC,IAJD,CAIM,UAACC,QAAD,EAAe;AACjB,UAAIQ,KAAK,GAAGR,QAAQ,CAACS,IAAT,CAAcC,GAAd,CAAkB,UAAAhB,GAAG,EAAI;AACjC,YAAMS,IAAI,GAAGT,GAAG,CAACS,IAAJ,EAAb;AACA,YAAMQ,EAAE,GAAGjB,GAAG,CAACiB,EAAf;AACA;AAASA,UAAAA,EAAE,EAAFA;AAAT,WAAgBR,IAAhB;AACH,OAJW,CAAZ;AAKAZ,MAAAA,QAAQ,CAAC;AAAEW,QAAAA,IAAI,EAAEd,uBAAR;AAAiCoB,QAAAA,KAAK,EAALA;AAAjC,OAAD,CAAR;AACH,KAXD;AAYH,GAbD;AAcH","sourcesContent":["import {USER_STATE_CHANGE, USER_POSTS_STATE_CHANGE} from '../constants/index'\r\nimport firebase from 'firebase'\r\nimport 'firebase/auth';\r\n\r\nexport function fetchUser(){\r\n    return((dispatch) => {\r\n        firebase.firestore()\r\n        .collection('users')\r\n        .doc(firebase.auth().currentUser.uid)\r\n        .get()\r\n        .then((snapshot) =>  {\r\n            if(snapshot.exists){\r\n            \r\n                dispatch({type: USER_STATE_CHANGE, currentUser: snapshot.data()})\r\n            }\r\n            else{\r\n                console.log('does not exist')\r\n            }\r\n        })\r\n\r\n    })\r\n}\r\n\r\nexport function fetchUserPosts(){\r\n    return((dispatch) => {\r\n        firebase.firestore()\r\n        .collection('posts')\r\n        .orderBy(\"creation\", \"asc\")\r\n        .get()\r\n        .then((snapshot) =>  {\r\n            let posts = snapshot.docs.map(doc => {\r\n                const data = doc.data();\r\n                const id = doc.id;\r\n                return { id, ...data }\r\n            })\r\n            dispatch({ type: USER_POSTS_STATE_CHANGE, posts })\r\n        })\r\n    })\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}