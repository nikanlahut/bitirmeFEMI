{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\AndroidStudioProjects\\\\berkay\\\\bitirme\\\\components\\\\main\\\\Comments.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport firebase from 'firebase';\n\nrequire('firebase/firestore');\n\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { fetchUserPosts } from \"../../redux/actions\";\nimport { Restart } from 'fiction-expo-restart';\n\nfunction Comment(props) {\n  var _this = this;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      comments = _useState2[0],\n      setComments = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      postId = _useState4[0],\n      setPostId = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      text = _useState6[0],\n      setText = _useState6[1];\n\n  var currentUser = props.currentUser;\n  var username = currentUser.username;\n  useEffect(function () {\n    firebase.firestore().collection('posts').doc(props.route.params.postId).collection('comments').get().then(function (snapshot) {\n      var comments = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread({\n          id: id\n        }, data);\n      });\n      setComments(comments);\n    });\n    setPostId(props.route.params.postId);\n  }, [props.route.params.postId]);\n\n  var onCommentSend = function onCommentSend() {\n    firebase.firestore().collection('posts').doc(props.route.params.postId).collection('comments').add({\n      creator: firebase.auth().currentUser.uid,\n      text: text,\n      username: username\n    });\n  };\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      refreshing = _React$useState2[0],\n      setRefreshing = _React$useState2[1];\n\n  var onRefresh = React.useCallback(function () {\n    setRefreshing(true);\n    wait(2000).then(function () {\n      return setRefreshing(false);\n    });\n  }, []);\n  return React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, React.createElement(FlatList, {\n    numColumns: 1,\n    horizontal: false,\n    data: comments,\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item;\n      return React.createElement(View, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }\n      }, React.createElement(Text, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 29\n        }\n      }, item.username), React.createElement(Text, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 25\n        }\n      }, item.text));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }, React.createElement(TextInput, {\n    placeholder: \"comment...\",\n    onChangeText: function onChangeText(text) {\n      return setText(text);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }\n  }), React.createElement(Button, {\n    onPress: function onPress() {\n      return onCommentSend();\n    },\n    title: \"Send\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }\n  }), React.createElement(Button, {\n    onPress: function onPress() {\n      return Restart();\n    },\n    title: \"Return\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }\n  })));\n}\n\nvar mapStateToProps = function mapStateToProps(store) {\n  return {\n    currentUser: store.userState.currentUser,\n    posts: store.userState.posts\n  };\n};\n\nexport default connect(mapStateToProps)(Comment);","map":{"version":3,"sources":["C:/Users/user/AndroidStudioProjects/berkay/bitirme/components/main/Comments.js"],"names":["React","useState","useEffect","firebase","require","connect","bindActionCreators","fetchUserPosts","Restart","Comment","props","comments","setComments","postId","setPostId","text","setText","currentUser","username","firestore","collection","doc","route","params","get","then","snapshot","docs","map","data","id","onCommentSend","add","creator","auth","uid","refreshing","setRefreshing","onRefresh","useCallback","wait","item","mapStateToProps","store","userState","posts"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport {SafeAreaView, RefreshControl, View, Text, FlatList, Button, TextInput, ScrollView } from 'react-native'\r\n\r\nimport firebase from 'firebase'\r\nrequire('firebase/firestore')\r\n\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux'\r\nimport { fetchUserPosts } from '../../redux/actions'\r\nimport {Restart} from 'fiction-expo-restart';\r\n\r\nfunction Comment(props) {\r\n    const [comments, setComments] = useState([])\r\n    const [postId, setPostId] = useState(\"\")\r\n    const [text, setText] = useState(\"\")\r\n    const {currentUser} = props;\r\n    const username = currentUser.username\r\n\r\n    useEffect(() => {\r\n        /*  \r\n        function matchUserToComment(comments) {\r\n            for (let i = 0; i < comments.length; i++) {\r\n                if (comments[i].hasOwnProperty('user')) {\r\n                    continue;\r\n                }\r\n\r\n                const user = props.users.find(x => x.uid === comments[i].creator)\r\n                if (user == undefined) {\r\n                    props.fetchUsersData(comments[i].creator, false)\r\n                } else {\r\n                    comments[i].user = user\r\n                }\r\n            }\r\n            setComments(comments)\r\n        } */\r\n\r\n\r\n        \r\n            firebase.firestore()\r\n                .collection('posts')\r\n                .doc(props.route.params.postId)\r\n                .collection('comments')\r\n                .get()\r\n                .then((snapshot) => {\r\n                    let comments = snapshot.docs.map(doc => {\r\n                        const data = doc.data();\r\n                        const id = doc.id;\r\n                        return { id, ...data }\r\n                    })\r\n                    setComments(comments)\r\n                })\r\n            setPostId(props.route.params.postId)\r\n         /* else {\r\n            matchUserToComment(comments)\r\n        } */\r\n    }, [props.route.params.postId])\r\n\r\n\r\n    const onCommentSend = () => {\r\n        firebase.firestore()\r\n            .collection('posts')\r\n            .doc(props.route.params.postId)\r\n            .collection('comments')\r\n            .add({\r\n                creator: firebase.auth().currentUser.uid,\r\n                text,\r\n                username\r\n            })\r\n    }\r\n\r\n    const [refreshing, setRefreshing] = React.useState(false);\r\n\r\n    const onRefresh = React.useCallback(() => {\r\n      setRefreshing(true);\r\n      wait(2000).then(() => setRefreshing(false));\r\n    }, []);\r\n\r\n    return (\r\n        <View>\r\n            <FlatList\r\n                numColumns={1}\r\n                horizontal={false}\r\n                data={comments}\r\n                renderItem={({ item }) => (\r\n                    <View>\r\n                            <Text>\r\n                                {item.username}\r\n                            </Text>\r\n                        <Text>{item.text}</Text>\r\n                    </View>\r\n                )}\r\n                \r\n            />\r\n\r\n            <View>\r\n                <TextInput\r\n                    placeholder='comment...'\r\n                    onChangeText={(text) => setText(text)} />\r\n                <Button\r\n                    onPress={() => onCommentSend()}\r\n                    title=\"Send\"\r\n                />\r\n                <Button\r\n                    onPress={() => Restart()}\r\n                    title='Return'\r\n                />\r\n            </View>\r\n\r\n        </View>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = (store) => ({\r\n    currentUser: store.userState.currentUser,\r\n    posts: store.userState.posts,\r\n})\r\n//const mapDispatchProps = (dispatch) => bindActionCreators({ fetchUsersData }, dispatch);\r\n\r\nexport default connect(mapStateToProps)(Comment);"]},"metadata":{},"sourceType":"module"}