{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\AndroidStudioProjects\\\\berkay\\\\bitirme\\\\components\\\\main\\\\Comments.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport firebase from 'firebase';\n\nrequire('firebase/firestore');\n\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nfunction Comment(props) {\n  var _this = this;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      comments = _useState2[0],\n      setComments = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      postId = _useState4[0],\n      setPostId = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      text = _useState6[0],\n      setText = _useState6[1];\n\n  var username = currentUser.username;\n  useEffect(function () {\n    if (props.route.params.postId !== postId) {\n      firebase.firestore().collection('posts').doc(props.route.params.postId).collection('comments').get().then(function (snapshot) {\n        var comments = snapshot.docs.map(function (doc) {\n          var data = doc.data();\n          var id = doc.id;\n          return _objectSpread({\n            id: id\n          }, data);\n        });\n        matchUserToComment(comments);\n      });\n      setPostId(props.route.params.postId);\n    }\n  }, [props.route.params.postId, props.users]);\n\n  var onCommentSend = function onCommentSend() {\n    firebase.firestore().collection('posts').doc(props.route.params.postId).collection('comments').add({\n      creator: firebase.auth().currentUser.uid,\n      text: text,\n      username: username\n    });\n  };\n\n  return React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, React.createElement(FlatList, {\n    numColumns: 1,\n    horizontal: false,\n    data: comments,\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item;\n      return React.createElement(View, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }\n      }, item.user !== undefined ? React.createElement(Text, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 29\n        }\n      }, item.username) : null, React.createElement(Text, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }\n      }, item.text));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }, React.createElement(TextInput, {\n    placeholder: \"comment...\",\n    onChangeText: function onChangeText(text) {\n      return setText(text);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }\n  }), React.createElement(Button, {\n    onPress: function onPress() {\n      return onCommentSend();\n    },\n    title: \"Send\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }\n  })));\n}\n\nvar mapStateToProps = function mapStateToProps(store) {\n  return {\n    currentUser: store.userState.currentUser,\n    posts: store.userState.posts\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchProps)(Comment);","map":{"version":3,"sources":["C:/Users/user/AndroidStudioProjects/berkay/bitirme/components/main/Comments.js"],"names":["React","useState","useEffect","firebase","require","connect","bindActionCreators","Comment","props","comments","setComments","postId","setPostId","text","setText","username","currentUser","route","params","firestore","collection","doc","get","then","snapshot","docs","map","data","id","matchUserToComment","users","onCommentSend","add","creator","auth","uid","item","user","undefined","mapStateToProps","store","userState","posts","mapDispatchProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { View, Text, FlatList, Button, TextInput } from 'react-native'\r\n\r\nimport firebase from 'firebase'\r\nrequire('firebase/firestore')\r\n\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux'\r\n\r\nfunction Comment(props) {\r\n    const [comments, setComments] = useState([])\r\n    const [postId, setPostId] = useState(\"\")\r\n    const [text, setText] = useState(\"\")\r\n    const username = currentUser.username\r\n\r\n    useEffect(() => {\r\n\r\n        /*\r\n        function matchUserToComment(comments) {\r\n            for (let i = 0; i < comments.length; i++) {\r\n                if (comments[i].hasOwnProperty('user')) {\r\n                    continue;\r\n                }\r\n\r\n                const user = props.users.find(x => x.uid === comments[i].creator)\r\n                if (user == undefined) {\r\n                    props.fetchUsersData(comments[i].creator, false)\r\n                } else {\r\n                    comments[i].user = user\r\n                }\r\n            }\r\n            setComments(comments)\r\n        } */\r\n\r\n\r\n        if (props.route.params.postId !== postId) {\r\n            firebase.firestore()\r\n                .collection('posts')\r\n                .doc(props.route.params.postId)\r\n                .collection('comments')\r\n                .get()\r\n                .then((snapshot) => {\r\n                    let comments = snapshot.docs.map(doc => {\r\n                        const data = doc.data();\r\n                        const id = doc.id;\r\n                        return { id, ...data }\r\n                    })\r\n                    matchUserToComment(comments)\r\n                })\r\n            setPostId(props.route.params.postId)\r\n        } /* else {\r\n            matchUserToComment(comments)\r\n        } */\r\n    }, [props.route.params.postId, props.users])\r\n\r\n\r\n    const onCommentSend = () => {\r\n        firebase.firestore()\r\n            .collection('posts')\r\n            .doc(props.route.params.postId)\r\n            .collection('comments')\r\n            .add({\r\n                creator: firebase.auth().currentUser.uid,\r\n                text,\r\n                username\r\n            })\r\n    }\r\n\r\n    return (\r\n        <View>\r\n            <FlatList\r\n                numColumns={1}\r\n                horizontal={false}\r\n                data={comments}\r\n                renderItem={({ item }) => (\r\n                    <View>\r\n                        {item.user !== undefined ?\r\n                            <Text>\r\n                                {item.username}\r\n                            </Text>\r\n                            : null}\r\n                        <Text>{item.text}</Text>\r\n                    </View>\r\n                )}\r\n            />\r\n\r\n            <View>\r\n                <TextInput\r\n                    placeholder='comment...'\r\n                    onChangeText={(text) => setText(text)} />\r\n                <Button\r\n                    onPress={() => onCommentSend()}\r\n                    title=\"Send\"\r\n                />\r\n            </View>\r\n\r\n        </View>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = (store) => ({\r\n    currentUser: store.userState.currentUser,\r\n    posts: store.userState.posts,\r\n})\r\n//const mapDispatchProps = (dispatch) => bindActionCreators({ fetchUsersData }, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchProps)(Comment);"]},"metadata":{},"sourceType":"module"}